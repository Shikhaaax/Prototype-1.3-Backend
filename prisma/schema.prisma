// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           String   @id @default(uuid())
  email             String   @unique
  password_hash     String
  first_name        String
  last_name         String
  institution_type  String
  institution_name  String
  signup_date       DateTime @default(now())

  studentProfile    StudentProfile?
  ideas             Idea[]
  notifications     Notification[]
  recommendations   Recommendation[]
  interactions      UserCompetitionInteraction[]
  blacklistedTokens BlacklistedToken[]
  outstandingTokens OutstandingToken[]
}

model StudentProfile {
  profile_id               String   @id @default(uuid())
  user_id                  String   @unique
  user                     User     @relation(fields: [user_id], references: [user_id])
  time_frame_available     String?
  interested_fields        String?

  goal_fundraising         Boolean
  goal_networking          Boolean
  goal_validation          Boolean
  goal_team_mate_finding   Boolean
  goal_resume_experience   Boolean
  goal_learning_experience Boolean
  goal_mentorship          Boolean
  goal_prestige            Boolean

  participation_type_team      Boolean
  participation_type_individual Boolean

  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
}

model Idea {
  idea_id        String   @id @default(uuid())
  user           User     @relation(fields: [user_id], references: [user_id])
  user_id        String
  problem        String
  sdgs           String
  solution       String
  poc            String
  experience     String
  team_size      Int
  category       String
  impact         String
  stage          String
  interested_domain String
  help_needed    String
  time_working   String
  submitted_hackathon Boolean
  hackathon_feedback   String?
  motivation     String
  future_goal    String
  short_term_goal String
  support_needed String
  final_upload   String?
  created_at     DateTime @default(now())
}

model Competition {
  competition_id  String   @id @default(uuid())
  title           String
  registration_link String
  description     String?
  deadline        DateTime?
  organizer       String?
  tags            String?
  created_at      DateTime @default(now())
}

model Recommendation {
  recommendation_id String @id @default(uuid())
  user              User   @relation(fields: [user_id], references: [user_id])
  user_id           String
  competition_id    String
  score             Float
  created_at        DateTime @default(now())
}

model UserCompetitionInteraction {
  interaction_id   String   @id @default(uuid())
  user             User     @relation(fields: [user_id], references: [user_id])
  user_id          String
  competition_id   String
  interaction_type String   // e.g., "click", "bookmark", "signup"
  timestamp        DateTime @default(now())
}

model Notification {
  notification_id  String   @id @default(uuid())
  user             User     @relation(fields: [user_id], references: [user_id])
  user_id          String
  content          String
  read             Boolean  @default(false)
  created_at       DateTime @default(now())
}

model BlacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  created_at DateTime @default(now())
}

model OutstandingToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  created_at DateTime @default(now())
}

